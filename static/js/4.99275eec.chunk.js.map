{"version":3,"sources":["Item.js"],"names":["useStyles","makeStyles","theme","media","height","width","cursor","cardContent","flexGrow","grid","justifyContent","dmText","color","card","backgroundColor","dmCard","dmDisabled","Item","props","classes","itemOwned","localStorage","getItem","item","useState","owned","setOwned","itemNum","array","filter","value","maxItemNum","maxItems","maxVal","className","isDarkMode","id","container","square","component","image","url","title","InputProps","disabled","inputProps","min","InputLabelProps","style","onChange","event","val","Number","target","isNaN","setItem","needed","document","getElementById","newMax","label","defaultValue","type"],"mappings":"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","file":"static/js/4.99275eec.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardMedia from '@material-ui/core/CardMedia'\nimport { makeStyles } from '@material-ui/core/styles'\nimport FormControl from '@material-ui/core/FormControl'\nimport Grid from '@material-ui/core/Grid'\nimport TextField from '@material-ui/core/TextField';\n\nconst useStyles = makeStyles((theme) => ({\n\tmedia: {\n\t\theight: '100px',\n\t\twidth: '100px',\n\t\t'&:hover': {\n\t\t\tcursor: 'pointer'\n\t\t}\n\t},\n\tcardContent: {\n\t\tflexGrow: 1,\n\t},\n\tgrid: {\n\t\tjustifyContent:'center'\n\t},\n\tdmText: {\n\t\tcolor: 'white',\n\t},\n\tcard: {\n\t\tbackgroundColor: '#f5f5f5',\n\t},\n\tdmCard: {\n\t\tbackgroundColor: '#777777',\n\t},\n\tdmDisabled: {\n\t\tcolor: '#cfcfcf',\n\t},\n}))\n\nexport default function Item(props) {\n\tconst classes = useStyles();\n\t\n\t// retrieving itemOwned\n\tlet itemOwned = localStorage.getItem(props.item + \" owned\")\n\t\n\t// Checking if it is nothing to set it to 0 prematurely\n\tif(itemOwned == null)\n\t\titemOwned = 0;\n\n\t// setting state owned with local storage :D\n\tconst [ owned, setOwned ] = useState(itemOwned)\n\n\tconst onOwnedChange = (event) => {\n\t\tlet val = Number(event.target.value);\n\n\t\tif(isNaN(val))\n\t\t\tval = 0;\n\n\t\tsetOwned(val)\n\t\tlocalStorage.setItem(props.item + \" owned\", val)\n\n\t\t// this doesn't make sense based off of how state is set up\n\t\t// but it works ig\n\t\tconst needed = document.getElementById(props.item + '-total-needed')\n\t\tconst newMax = maxVal - (val + itemNum);\n\t\tneeded.value = newMax;\n\t}\n\n\t// When the ascension value changes,\n\t// hopefully change the number of items needed.\n\tconst onAscendedChange = (event) => {\n\t\tconst needed = document.getElementById(props.item + '-total-needed')\n\t\tconst newMax = maxVal - (owned + itemNum);\n\t\tneeded.value = newMax;\n\t}\n\n\t// finding the current item being displayed\n\tconst thisItem = props.array.filter((item) => {\n\t\tif (item.item == props.item)\n\t\t\treturn item;\n\t})\n\n\t// setting the number of times the item was used to ascend\n\tconst itemNum = thisItem[0].value;\n\n\t// finding props.item to get the max value\n\tconst maxValue = props.maxItems.filter((item) => {\n\t\tif (item.item == props.item)\n\t\t\treturn item;\n\t})\n\n\t// the maximum number of items needed to ascend\n\tconst maxItemNum = maxValue[0].value;\n\n\tconst [ maxVal, setMaxVal ] = useState(maxItemNum)\n\n\treturn (\n\t\t<div>\n\t\t\t<Card className={props.isDarkMode ? classes.dmCard : classes.card} id={props.item}>\n\t\t\t\t{/* To be the item image later */}\n\t\t\t\t<Grid container className={classes.grid}>\n\t\t\t\t\t<CardMedia square=\"true\" component=\"img\" \n\t\t\t\t\t\tclassName={classes.media}\n\t\t\t\t\t\timage={props.url+'/Items/' + props.item + '.png'}\n\t\t\t\t\t\ttitle={props.item} />\n\t\t\t\t</Grid>\n\n\t\t\t\t<CardContent className={classes.cardContent}>\n\t\t\t\t\t<h2 className={props.isDarkMode ? classes.dmText : \"\"}>{props.item}</h2>\n\n\t\t\t\t\t<FormControl component=\"fieldset\">\n\t\t\t\t\t\t<TextField id={props.item + \"-total-owned\"}\n\t\t\t\t\t\t\tInputProps={props.isDarkMode ? { classes: {disabled: classes.dmDisabled}, className: classes.dmText, inputProps: { min: 0 }} : {inputProps: { min: 0 }}} \n\t\t\t\t\t\t\tInputLabelProps={props.isDarkMode ? {style: {color: 'white'}} : {}}\n\t\t\t\t\t\t\tonChange={onOwnedChange}\n\t\t\t\t\t\t\tlabel=\"Total Owned\"\n\t\t\t\t\t\t\tdefaultValue={owned}\n\t\t\t\t\t\t\ttype=\"number\" />\n\n\t\t\t\t\t\t<TextField id={props.item + \"-total-ascended\"}\n\t\t\t\t\t\t\tInputProps={props.isDarkMode ? { classes: {disabled: classes.dmDisabled}, className: classes.dmText} : {}} \n\t\t\t\t\t\t\tInputLabelProps={props.isDarkMode ? {style: {color: 'white'}} : {}}\n\t\t\t\t\t\t\tdisabled={true}\n\t\t\t\t\t\t\tonChange={onAscendedChange}\n\t\t\t\t\t\t\tlabel=\"Total Ascended\"\n\t\t\t\t\t\t\tdefaultValue={itemNum}\n\t\t\t\t\t\t\ttype=\"number\" />\n\n\t\t\t\t\t\t{/* Input for total number of items needed for full ascension\n\t\t\t\t\t\t\tHas the default value like this to initially set upon loading\n\t\t\t\t\t\t\tto accurately display the amount needed */}\n\t\t\t\t\t\t<TextField id={props.item + \"-total-needed\"}\n\t\t\t\t\t\t\tInputProps={props.isDarkMode ? { classes: {disabled: classes.dmDisabled}, className: classes.dmText} : {}} \n\t\t\t\t\t\t\tInputLabelProps={props.isDarkMode ? {style: {color: 'white'}} : {}}\n\t\t\t\t\t\t\tdisabled={true}\n\t\t\t\t\t\t\tlabel=\"Total Needed\"\n\t\t\t\t\t\t\tdefaultValue={maxVal - itemNum - owned}\n\t\t\t\t\t\t\ttype=\"number\" />\n\t\t\t\t\t</FormControl>\n\t\t\t\t</CardContent>\n\t\t\t</Card>\n\t\t</div>\n\t)\n}"],"sourceRoot":""}